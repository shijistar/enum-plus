name: Reusable Tests
on:
  workflow_call: # This workflow can be called by other workflows
    inputs:
      node-version:
        required: false
        type: string
        description: 'Specific Node.js version for single test'
        default: ''
      use-matrix:
        required: false
        type: boolean
        description: 'Whether to run tests on multiple Node.js versions'
        default: false

jobs:
  # Run tests on single specified Node.js version
  single-test:
    if: ${{ inputs.use-matrix == false }}
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - name: Use Node.js ${{ inputs.node-version }}
        uses: actions/setup-node@v4
        with:
          node-version: ${{ inputs.node-version || vars.DEFAULT_NODE_VERSION }}
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Run tests
        run: npm test

  # Run legacy tests on multiple matrix Node.js versions
  matrix-test-legacy-node13:
    if: ${{ inputs.use-matrix == true }}
    runs-on: ubuntu-latest
    needs: build-legacy-node13
    strategy:
      matrix:
        node-version: [7.x, 8.x, 9.x, 10.x, 11.x, 12.x, 13.x]
    steps:
      - uses: actions/checkout@v4

      - name: Restore cache
        uses: actions/cache@v4
        with:
          path: |
            node_modules
            lib
          key: ${{ runner.os }}-build-${{ github.sha }}

      - name: Use Node.js ${{ matrix.node-version }}
        uses: actions/setup-node@v4
        with:
          node-version: ${{ matrix.node-version }}

      - name: Run tests
        run: npm run test-legacy

  # Run legacy tests on multiple matrix Node.js versions
  matrix-test-legacy-node15:
    if: ${{ inputs.use-matrix == true }}
    runs-on: ubuntu-latest
    needs: build-legacy-node13
    strategy:
      matrix:
        node-version: [14.x, 15.x]
    steps:
      - uses: actions/checkout@v4

      - name: Restore cache
        uses: actions/cache@v4
        with:
          path: |
            node_modules
            lib
          key: ${{ runner.os }}-build-${{ github.sha }}

      - name: Use Node.js ${{ matrix.node-version }}
        uses: actions/setup-node@v4
        with:
          node-version: ${{ matrix.node-version }}

      - name: Run tests
        run: npm run test-legacy

  # Run tests on multiple matrix Node.js versions
  matrix-test-modern:
    if: ${{ inputs.use-matrix == true }}
    runs-on: ubuntu-latest
    needs: build-modern
    strategy:
      matrix:
        node-version: [16.x, 17.x, 18.x, 19.x, 20.x, 21.x, 22.x, 23.x]
    steps:
      - uses: actions/checkout@v4

      - name: Restore cache
        uses: actions/cache@v4
        with:
          path: |
            node_modules
          key: ${{ runner.os }}-build-${{ github.sha }}

      - name: Use Node.js ${{ matrix.node-version }}
        uses: actions/setup-node@v4
        with:
          node-version: ${{ matrix.node-version }}

      - name: Run tests
        run: npm test

  # This job is used to run tests on legacy Node.js versions
  # 1. Use default Node.js
  # 2. Install older versions of jest and ts-jest
  # 3. Build the project
  # 4. Cache node_modules and lib
  build-legacy-node13:
    if: ${{ inputs.use-matrix == true }}
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - name: Use Node.js ${{ vars.DEFAULT_NODE_VERSION }}
        uses: actions/setup-node@v4
        with:
          node-version: ${{ vars.DEFAULT_NODE_VERSION }}
          cache: 'npm'

      - name: Downgrade legacy dependencies
        run: npm run prepare-legacy-node13

      - name: Install dependencies
        run: npm install --legacy-peer-deps --ignore-scripts --no-package-lock

      - name: Build
        run: npm run build:lib

      - name: Cache build output
        uses: actions/cache@v4
        with:
          path: |
            node_modules
            lib
          key: ${{ runner.os }}-build-${{ github.sha }}

  # This job is used to run tests on legacy Node.js versions
  # 1. Use default Node.js
  # 2. Install older versions of jest and ts-jest
  # 3. Build the project
  # 4. Cache node_modules and lib
  build-legacy-node15:
    if: ${{ inputs.use-matrix == true }}
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - name: Use Node.js ${{ vars.DEFAULT_NODE_VERSION }}
        uses: actions/setup-node@v4
        with:
          node-version: ${{ vars.DEFAULT_NODE_VERSION }}
          cache: 'npm'

      - name: Downgrade legacy dependencies
        run: npm run prepare-legacy-node15

      - name: Install dependencies
        run: npm install --legacy-peer-deps --ignore-scripts --no-package-lock

      - name: Build
        run: npm run build:lib

      - name: Cache build output
        uses: actions/cache@v4
        with:
          path: |
            node_modules
            lib
          key: ${{ runner.os }}-build-${{ github.sha }}

  # This job is used to run tests on modern Node.js versions
  # 1. Use default Node.js
  # 2. Install latest dependencies
  # 3. Cache node_modules
  build-modern:
    if: ${{ inputs.use-matrix == true }}
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - name: Use Node.js ${{ vars.DEFAULT_NODE_VERSION }}
        uses: actions/setup-node@v4
        with:
          node-version: ${{ vars.DEFAULT_NODE_VERSION }}
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      # - name: Build
      #   run: npm run build

      - name: Cache build output
        uses: actions/cache@v4
        with:
          path: |
            node_modules
          key: ${{ runner.os }}-build-${{ github.sha }}
