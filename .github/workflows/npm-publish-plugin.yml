name: NPM Publish (Plugin Package)

on:
  release:
    types: [created]

permissions:
  contents: write
  packages: write
  actions: read
  statuses: write

jobs:
  check-release-tag-for-plugin:
    runs-on: ubuntu-latest
    outputs:
      is_plugin_tag: ${{ steps.check.outputs.is_plugin_tag }}
      plugin_name: ${{ steps.check.outputs.plugin_name }}
    steps:
      - id: check
        run: |
          TAG="${{ github.event.release.tag_name }}"
          if [[ "$TAG" =~ ^(plugin-[-A-Za-z0-9]+)@[0-9]+\.[0-9]+\.[0-9]+(-[A-Za-z0-9\.]+)?$ ]]; then
            echo "is_plugin_tag=true" >> "$GITHUB_OUTPUT"
            echo "plugin_name=${BASH_REMATCH[1]}" >> "$GITHUB_OUTPUT"
          else
            echo "is_plugin_tag=false" >> "$GITHUB_OUTPUT"
          fi

  # Run tests on single specified Node.js version
  run-unit-tests:
    if: needs.check-release-tag-for-plugin.outputs.is_plugin_tag == 'true'
    needs: check-release-tag-for-plugin
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - name: Use Node.js ${{ vars.DEFAULT_NODE_VERSION }}
        uses: actions/setup-node@v4
        with:
          node-version: ${{ vars.DEFAULT_NODE_VERSION }}

      - name: Try to restore modern node_modules cache
        id: node_modules_cache
        uses: actions/cache@v4
        with:
          path: node_modules
          key: ${{ runner.os }}-modern-node-modules-${{ hashFiles('**/package-lock.json') }}

      - name: Install dependencies
        if: steps.node_modules_cache.outputs.cache-hit != 'true'
        run: npm ci

      - name: Build package
        run: npm run build

      - name: Run modern jest tests (target plugin)
        working-directory: packages/${{ needs.check-release-tag-for-plugin.outputs.plugin_name }}
        run: npm test

  publish-npm:
    if: needs.check-release-tag-for-plugin.outputs.is_plugin_tag == 'true'
    needs: [check-release-tag-for-plugin, run-unit-tests]
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - name: Use Node.js ${{ vars.DEFAULT_NODE_VERSION }}
        uses: actions/setup-node@v4
        with:
          node-version: ${{ vars.DEFAULT_NODE_VERSION }}
          registry-url: "https://registry.npmjs.org"
          cache: "npm"
          cache-dependency-path: "**/package-lock.json"

      - name: Try to restore modern node_modules cache
        id: node_modules_cache
        uses: actions/cache@v4
        with:
          path: node_modules
          key: ${{ runner.os }}-modern-node-modules-${{ hashFiles('**/package-lock.json') }}

      - name: Install dependencies
        if: steps.node_modules_cache.outputs.cache-hit != 'true'
        run: npm ci

      - name: Build package
        run: npm run build

      - name: Run tests (target plugin)
        working-directory: packages/${{ needs.check-release-tag-for-plugin.outputs.plugin_name }}
        run: npm test

      - name: Request the latest version of @enum-plus/${{ needs.check-release-tag-for-plugin.outputs.plugin_name }} before publish
        id: get_latest_version_before_publish
        run: |
          VERSION=$(npm view @enum-plus/${{ needs.check-release-tag-for-plugin.outputs.plugin_name }} version || echo 0.0.0)
          echo "LATEST_VERSION=$VERSION" >> $GITHUB_OUTPUT

      - name: Request the next version of @enum-plus/${{ needs.check-release-tag-for-plugin.outputs.plugin_name }} before publish
        id: get_next_version_before_publish
        continue-on-error: true
        run: |
          VERSION=$(npm view @enum-plus/${{ needs.check-release-tag-for-plugin.outputs.plugin_name }}@next version 2>/dev/null || echo 0.0.0)
          echo "NEXT_VERSION=$VERSION" >> $GITHUB_OUTPUT

      - name: Publish a prerelease version to npm
        working-directory: packages/${{ needs.check-release-tag-for-plugin.outputs.plugin_name }}
        run: npm publish --tag beta --ignore-scripts --access=public
        if: github.event.release.prerelease
        env:
          NODE_AUTH_TOKEN: ${{ secrets.AT_ENUM_PLUS_SCOPE_NPM_TOKEN }}

      - name: Publish a regular version to npm
        run: npm publish --ignore-scripts --access=public
        if: github.event.release.prerelease == false
        env:
          NODE_AUTH_TOKEN: ${{ secrets.AT_ENUM_PLUS_SCOPE_NPM_TOKEN }}

      - uses: madhead/semver-utils@latest
        id: new_vs_latest
        with:
          version: ${{ github.event.release.tag_name }}
          compare-to: ${{ steps.get_latest_version_before_publish.outputs.LATEST_VERSION }}

      - uses: madhead/semver-utils@latest
        id: new_vs_next
        with:
          version: ${{ github.event.release.tag_name }}
          compare-to: ${{ steps.get_next_version_before_publish.outputs.NEXT_VERSION }}

      - name: Add npm dist-tag for "next"
        if: github.event.release.prerelease
        run: |
          if [ "${{ steps.new_vs_latest.outputs.comparison-result }}" = ">" ]; then
            npm dist-tag add @enum-plus/${{ needs.check-release-tag-for-plugin.outputs.plugin_name }}@${{ github.event.release.tag_name }} next --access=public
          fi
        env:
          NODE_AUTH_TOKEN: ${{ secrets.AT_ENUM_PLUS_SCOPE_NPM_TOKEN }}

      - name: Remove npm dist-tag for "next"
        if: github.event.release.prerelease == false
        run: |
          if [ "${{ steps.get_next_version_before_publish.outputs.NEXT_VERSION }}" != "0.0.0" ] && [ "${{ steps.new_vs_next.outputs.comparison-result }}" = ">" ]; then
            npm dist-tag rm @enum-plus/${{ needs.check-release-tag-for-plugin.outputs.plugin_name }} next --access=public
          fi
        env:
          NODE_AUTH_TOKEN: ${{ secrets.AT_ENUM_PLUS_SCOPE_NPM_TOKEN }}

      - name: Upload coverage reports to Codecov
        uses: codecov/codecov-action@v5
        with:
          token: ${{ secrets.CODECOV_TOKEN }}
          slug: shijistar/enum-plus
          files: packages/${{ needs.check-release-tag-for-plugin.outputs.plugin_name }}/coverage/lcov.info
          # Give the current upload a unique identifier for easy grouping in the Codecov UI
          flags: plugin-${{ needs.check-release-tag-for-plugin.outputs.plugin_name }}
          # Optional: Give this upload a name
          name: ${{ needs.check-release-tag-for-plugin.outputs.plugin_name }}
